#!/usr/bin/env groovy
/*
 * Build script for gradle-packer-plugin
 * Copyright Â© 2016-2018  Basil Peace
 *
 * This file is part of gradle-packer-plugin.
 *
 * This plugin is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This plugin is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this plugin.  If not, see <https://www.gnu.org/licenses/>.
 */
plugins {
  id 'org.fidata.project.java' version '4.1.0'
  id 'org.fidata.project.groovy' version '4.1.0'
  id 'org.fidata.plugin' version '4.1.0'
  id 'org.fidata.packer-base'
}

description = 'Runs Packer builds from Gradle'
tags.set(['packer', 'devops', 'vm'])
license = 'LGPL-3.0-or-later'
publicReleases = true
contacts {
  'grv87@yandex.ru' {
    moniker 'Basil Peace'
    github 'grv87'
    roles 'owner', 'developer'
  }
}

ext.rootDir = '.'

apply from: new File(ext.rootDir, 'gradle/dependencies-compile.gradle')

tasks.withType(JavaCompile).configureEach { JavaCompile javaCompile ->
  javaCompile.options.encoding = 'UTF-8'
}

/*
 * WORKAROUND:
 * https://github.com/DanySK/javadoc.io-linker/issues/5
 * `org.danilopianini.javadoc.io-linker` plugin doesn't work with `java-library` plugin
 * <grv87 2018-06-23>
 */
afterEvaluate {
  jvm.javadocLinks['org.ysb33r.grolifant'] = uri("https://ysb33rorg.gitlab.io/grolifant/${ configurations.getByName('compileClasspath').resolvedConfiguration.firstLevelModuleDependencies.find { it.moduleGroup == 'org.ysb33r.gradle' && it.moduleName == 'grolifant' }.moduleVersion }/api/")
  jvm.javadocLinks['com.fasterxml.jackson.databind'] = uri("http://fasterxml.github.io/jackson-annotations/javadoc/${ configurations.getByName('compileClasspath').resolvedConfiguration.firstLevelModuleDependencies.find { it.moduleGroup == 'com.fasterxml.jackson.core' && it.moduleName == 'jackson-core' }.moduleVersion.replaceFirst(/.0$/, '') }/")
  jvm.javadocLinks['com.fasterxml.jackson.annotation'] = uri("http://fasterxml.github.io/jackson-annotations/javadoc/${ configurations.getByName('compileClasspath').resolvedConfiguration.firstLevelModuleDependencies.find { it.moduleGroup == 'com.fasterxml.jackson.core' && it.moduleName == 'jackson-annotations' }.moduleVersion.replaceFirst(/.0$/, '') }/")
}

apply from: new File(ext.rootDir, 'gradle/gradle-plugin-markers.gradle')

tasks.named('codenarcMain').configure { disabledRules.add 'JavaIoPackageAccess' }
tasks.named('codenarcFunctionalTest').configure { disabledRules.add 'JavaIoPackageAccess' }
tasks.named('codenarcBuildSrc').configure { disabledRules.add 'JavaIoPackageAccess' }

sourceSets {
  integTest {
    groovy.srcDirs = ['src/integTest/groovy']
    resources.srcDirs = ['src/integTest/resources']
    compileClasspath += sourceSets['main'].output
    runtimeClasspath += output + sourceSets['main'].output
  }
}

plugins.getPlugin('org.fidata.base.jvm').configureIntegrationTestSourceSetClasspath sourceSets['integTest']
plugins.getPlugin('org.fidata.base.jvm').addJUnitDependency sourceSets['integTest']
plugins.getPlugin('org.fidata.base.groovy').addGroovyDependency configurations[sourceSets['integTest'].implementationConfigurationName]

tasks.register('packerValidate-integTest')

import org.apache.commons.io.FilenameUtils

for (File singleTemplateFile in project.fileTree('src/integTest/resources/org/fidata/gradle/packer/template') { ConfigurableFileTree fileTree ->
  fileTree.include '**/*.json'
}) {
  TaskProvider<Task> packerValidateIntegTestSingleTemplateProvider = tasks.register("packerValidate-integTest-${ FilenameUtils.getBaseName(singleTemplateFile.toString()) }", ext.PackerValidate) {
    templateFile = singleTemplateFile
    syntaxOnly = true
  }
  // TODO: CI doesn't have Packer installed
  if ()
  tasks.named('packerValidate-integTest').configure { Task packerValidateIntegTest ->
    packerValidateIntegTest.dependsOn packerValidateIntegTestSingleTemplateProvider
  }
}

tasks.register('integTest', Test) {
  group = 'Verification'
  description = 'Runs integration tests'
  shouldRunAfter 'test' // WORKAROUND: https://github.com/FIDATA/gradle-base-plugins/issues/27 <grv87 2018-08-08>
  dependsOn 'packerValidate-integTest'
  testClassesDirs = sourceSets['integTest'].output.classesDirs
  classpath = sourceSets['integTest'].runtimeClasspath
  reports.junitXml.destination = new File(xmlReportsDir, 'integTest')
  reports.html.destination = new File(htmlReportsDir, 'integTest')
}

// WORKAROUND: https://github.com/FIDATA/gradle-base-plugins/issues/27 <grv87 2018-08-08>
tasks.named('functionalTest').configure {
  shouldRunAfter 'integTest'
}

repositories {
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
  testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: 'latest.release'
  testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '[1, 2['

  integTestImplementation group: 'commons-io', name: 'commons-io', version: '2.5'
  integTestImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: 'latest.release'
}

stutter {
  sparse = true
  java(8) {
    compatibleRange '3.1'
  }
  java(9) {
    compatibleRange '3.1'
  }
}

pluginBundle.plugins {
  packerBasePlugin {
    displayName = 'Packer base plugin'
  }
  packerPlugin {
    displayName = 'Packer plugin'
  }
}
