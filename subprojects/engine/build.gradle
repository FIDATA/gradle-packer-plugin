/*buildscript {
  configurations.classpath.resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}*/
plugins {
  id 'org.fidata.project.java'
  id 'org.fidata.project.groovy'
}
dependencies {
  api gradleApi()
  // implementation 'org.codehaus.groovy:groovy-all:x.y.z'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '[2.9, 3['
  api group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '[2.9, 3['
  api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '[2.9, 3[' // TODO: Databind is required only for JsonDeserialize annotation for AutoImplement. There are other ways - see InterpolableValue. Need to sync these approaches
  implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: '[2.9, 3['
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: '[2.9, 3['
  implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-afterburner', version: '[2.9, 3['
  implementation group: 'com.samskivert', name: 'jmustache', version: '[1, 2['
  implementation group: 'com.fasterxml.uuid', name: 'java-uuid-generator', version: '[3, 4['
  api group: 'com.google.guava', name: 'guava', version: '26.0-jre'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '[3, 4['
  implementation group: 'commons-io', name: 'commons-io', version: '[2, 3['
}

/*
 * WORKAROUND:
 * https://github.com/DanySK/javadoc.io-linker/issues/5
 * `org.danilopianini.javadoc.io-linker` plugin doesn't work with `java-library` plugin
 * <grv87 2018-06-23>
 */
afterEvaluate {
  jvm.javadocLinks['com.fasterxml.jackson.annotation'] = uri("http://fasterxml.github.io/jackson-annotations/javadoc/${ configurations.getByName('compileClasspath').resolvedConfiguration.firstLevelModuleDependencies.find { it.moduleGroup == 'com.fasterxml.jackson.core' && it.moduleName == 'jackson-annotations' }.moduleVersion.replaceFirst(/\.0\z/, '') }/")
  jvm.javadocLinks['com.fasterxml.jackson.databind'] = uri("http://fasterxml.github.io/jackson-databind/javadoc/${ configurations.getByName('compileClasspath').resolvedConfiguration.firstLevelModuleDependencies.find { it.moduleGroup == 'com.fasterxml.jackson.core' && it.moduleName == 'jackson-databind' }.moduleVersion.replaceFirst(/\.0\z/, '') }/")
}

sourceSets {
  integTest {
    groovy.srcDirs = ['src/integTest/groovy']
    resources.srcDirs = ['src/integTest/resources']
  }
}

sourceSets.named('integTest').configure {
  plugins.getPlugin('org.fidata.base.jvm').configureIntegrationTestSourceSetClasspath it
}
plugins.getPlugin('org.fidata.base.jvm').addJUnitDependency sourceSets.named('integTest')
plugins.getPlugin('org.fidata.base.groovy').addGroovyDependency configurations.named(sourceSets['integTest'].implementationConfigurationName)

dependencies {
  testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '[1, 2['
  testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '[1, 2['
  // Provided by main: integTestImplementation group: 'com.google.guava', name: 'guava', version: '26.0-jre'
  integTestImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '[1, 2['
}

tasks.register('integTest', Test) {
  group = 'Verification'
  description = 'Runs integration tests'
  shouldRunAfter 'test' // WORKAROUND: https://github.com/FIDATA/gradle-base-plugins/issues/27 <grv87 2018-12-05>
  testClassesDirs = sourceSets['integTest'].output.classesDirs
  classpath = sourceSets['integTest'].runtimeClasspath
  reports.junitXml.destination = new File(xmlReportsDir, 'integTest')
  reports.html.destination = new File(htmlReportsDir, 'integTest')
}

tasks.named('codenarcMain').configure {
  disabledRules.add 'ClassJavadoc' // TODO
}

tasks.register('codenarcIntegTestResources', CodeNarc) {
  for (File srcDir in sourceSets.integTest.resources.srcDirs) {
    source fileTree(dir: srcDir, includes: ['**/*.groovy'])
  }
}

task('writeClasspath').doLast {
  buildDir.mkdirs()
  new File(buildDir, "classpath.txt").text = configurations.integTestImplementation.asPath + "\n"
}
task(type: Copy, 'copyDependencies') {
  from configurations.integTestCompileClasspath
  into new File(buildDir, "dependencies")
}
