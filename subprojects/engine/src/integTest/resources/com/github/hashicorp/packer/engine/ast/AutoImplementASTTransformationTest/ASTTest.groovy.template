import static org.codehaus.groovy.control.CompilePhase.*
import com.github.hashicorp.packer.engine.annotations.AutoImplement
import org.codehaus.groovy.ast.builder.AstBuilder
import org.codehaus.groovy.macro.matcher.ASTMatcher
import com.google.common.base.Charsets
import com.google.common.io.Resources
import org.codehaus.groovy.ast.ASTNode
import org.codehaus.groovy.ast.AnnotationNode
import org.codehaus.groovy.ast.ClassHelper
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.ast.InnerClassNode
import org.codehaus.groovy.ast.tools.WideningCategories
import groovy.transform.ASTTest

@ASTTest(phase = $compilePhase, value = {
  expected = new AstBuilder().buildFromString($compilePhase, Resources.toString(Resources.getResource($expectedUrl), Charsets.UTF_8))
  // AstAssert.assertSyntaxTree(, )
  assert ASTMatcher.matches(expected.findAll { ASTNode e -> InnerClassNode.isInstance(e) }, node.module.classes.findAll { s -> InnerClassNode.isInstance(s) })

  expectedClasses = expected.findAll { ASTNode e -> ClassNode.isInstance(e) && !InnerClassNode.isInstance(e) }
  actualClasses = node.module.classes.findAll { ASTNode e -> ClassNode.isInstance(e) && !InnerClassNode.isInstance(e) }
  actualClasses*.annotations*.removeAll { AnnotationNode a -> WideningCategories.implementsInterfaceOrSubclassOf(a.classNode, ClassHelper.make(ASTTest)) || WideningCategories.implementsInterfaceOrSubclassOf(a.classNode, ClassHelper.make(AutoImplement)) }
  assert ASTMatcher.matches(expectedClasses, actualClasses)
})
